<?php

/**
 * @class      GdProcessFeed
 *
 * This is the data structure for getting GdFeedItems.
 *
 * @author     Developer
 * @copyright  PLS 3rd Learning, Inc. All rights reserved.
 */
class GdProcessFeed extends CModel {

	/** @var Feed $_feed */
	private $_feed;

	/**
	 * Returns the list of attribute names.
	 *
	 * @return array[]
	 */
	public function attributeNames() {
		return [
			'feed'
		];
	}
	
	/**
	 * Set the private $_feed variable.
	 *
	 * @param  Feed $feed
	 * @return void
	 */
	public function setFeed(Feed $feed) {
		$this->_feed = $feed;
	}
	
	/**
	 * Get the private $_feed variable.
	 *
	 * @return Feed|null
	 */
	public function getFeed() {
		return $this->_feed;
	}
	
	/**
	 * Return an array of GdFeedItems.
	 .
	 * @param  int $amount
	 * @return array[]
	 * @throws GdProcessFeedException
	 */
	public function fetchLatestItems(int $amount=1) {
		$return = [];
		
		if ($this->_feed === null) {
			throw new GdProcessFeedException('No feed has been loaded.');
		}
		else {
			if (!empty($this->_feed)) {
				foreach ($this->_feed->item as $item) {
					// Use GdFeedItem so that shortDescription is automatically available
					$gdFeedItem = new GdFeedItem();
					$gdFeedItem->item = $item;
					$return[] = $gdFeedItem;
				}
				
				// Sort by date descending
				usort($return, function($a, $b){
					if ((int)$a->timestamp < (int)$b->timestamp) {
						return 1;
					}
					elseif ((int)$a->timestamp > (int)$b->timestamp){
						return -1;
					}
					else {
						return 0;
					}
				});
				
				// Retrun the requested number of entries
				if ($amount > 0 && $amount < count($return)) {
					array_splice($return, $amount);
				}
			}
		}
		
		return $return;
	}
}

/**
 * An exception generated by GdProcessFeed.
 */
class GdProcessFeedException extends Exception
{
}